<?php

/*
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This software consists of voluntary contributions made by many individuals
 * and is licensed under the MIT license. For more information, see
 * <http://www.doctrine-project.org>.
 */

namespace Doctrine\Common\Persistence\Mapping;


use \ReflectionClass;
use \ReflectionProperty;

/**
 * Class metadata compiler
 *
 * @since   2.5
 * @author  Fabio B. Silva <fabio.bat.silva@gmail.com>
 */
class ClassMetadataCompiler
{
    /**
    * @var string
    */
    protected static $classTemplate =
'<?php

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE\'S METADATA COMPILER
 * <date>
 */

namespace <namespace>;

class <className> extends \<classMetadataName>
{
<classBody>
}
';

    /**
     * @var \Doctrine\Common\Persistence\Mapping\ClassMetadata
     */
    private $metadata;

    /**
     * @var \ReflectionClass
     */
    private $class;

    /**
     * @var string
     */
    private $namespace;

    /**
     * @var string
     */
    private $metadataClassName;

    /**
     * @var string
     */
    private $metadataClassShortName;

    public function __construct(ClassMetadata $metadata, $metadataClassName)
    {
        $this->metadata                 = $metadata;
        $this->metadataClassName        = $metadataClassName;
        $this->class                    = new ReflectionClass($this->metadata);
        $this->metadataClassShortName   = substr($metadataClassName, strrpos($metadataClassName, '\\') + 1);
        $this->namespace                = trim(substr($metadataClassName, 0, strrpos($metadataClassName, '\\')), '\\');
    }

    /**
     * @return array
     */
    private function getDefaultValues()
    {
        $values     = array();
        $class      = $this->class;
        $defaults   = $class->getDefaultProperties();
        $properties = $class->getProperties(ReflectionProperty::IS_PUBLIC);
        $sleep      = method_exists($this->metadata, '__sleep')
            ? $this->metadata->__sleep()
            : null;

        foreach ($properties as $property) {
            $name  = $property->name;
            $value = $this->metadata->{$name};

            if ($sleep && ! in_array($name, $sleep)) {
                continue;
            }

            if($value !== $defaults[$name]) {
                $values[$name] = $value;
            }
        }

        return $values;
    }

    /**
     * @return string
     */
    public function generateContent()
    {
        $code   = array();
        $values = $this->getDefaultValues();
        $format = '    public $%s = %s;' . PHP_EOL;

        foreach ($values as $key => $value) {
            $code[] = sprintf($format, $key, str_replace(PHP_EOL, ' ', var_export($value, true)));
        }

        $classBody          = implode(PHP_EOL, $code);
        $classMetadataName  = $this->class->getName();

        $placeholders = array(
            '<date>',
            '<namespace>',
            '<className>',
            '<classMetadataName>',
            '<classBody>'
        );

        $replacements = array(
            date('Y-m-d H:i:s'),
            $this->namespace,
            $this->metadataClassShortName,
            $classMetadataName,
            $classBody
        );

        return str_replace($placeholders, $replacements, static::$classTemplate);
    }

    public function generate($directory)
    {
        $content  = $this->generateContent();
        $filename = $directory . DIRECTORY_SEPARATOR . str_replace('\\', '', $this->metadataClassName) . '.php';

        if ( ! file_exists($filename)) {
            file_put_contents($filename, $content);
        }

        return $filename;
    }
}
